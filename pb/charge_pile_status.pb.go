// Code generated by protoc-gen-go.
// source: charge_pile_status.proto
// DO NOT EDIT!

/*
Package Report is a generated protocol buffer package.

It is generated from these files:
	charge_pile_status.proto
	manage.proto
	param.proto

It has these top-level messages:
	ChargingPileStatus
	Command
	Param
*/
package Report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChargingPileStatus struct {
	// 通信相关
	DasUuid   string `protobuf:"bytes,1,opt,name=das_uuid" json:"das_uuid,omitempty"`
	Cpid      uint64 `protobuf:"varint,2,opt,name=cpid" json:"cpid,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	// --------------  状态相关 ------------
	// 充电桩状态 0 可用 !0不可用
	Status uint32 `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	// 实时电流 安
	RealTimeCurrent float32 `protobuf:"fixed32,5,opt,name=RealTimeCurrent" json:"RealTimeCurrent,omitempty"`
	// 实时电压 1福特
	RealTimeVoltage float32 `protobuf:"fixed32,6,opt,name=RealTimeVoltage" json:"RealTimeVoltage,omitempty"`
	// --------------  订单相关 ------------
	// 当前订单的订单号 30位（14位日期+16为cpid）
	CurrentOrderNumber string `protobuf:"bytes,7,opt,name=currentOrderNumber" json:"currentOrderNumber,omitempty"`
	// 充电时长 单位 秒
	ChargingDuration uint32 `protobuf:"varint,8,opt,name=ChargingDuration" json:"ChargingDuration,omitempty"`
	// 充电电量 单位 度
	ChargingCapacity float32 `protobuf:"fixed32,9,opt,name=ChargingCapacity" json:"ChargingCapacity,omitempty"`
	// 充电花费(包含服务费) 单位 元
	ChargingCost float32 `protobuf:"fixed32,10,opt,name=ChargingCost" json:"ChargingCost,omitempty"`
	// 充电花费(不包含服务费) 单位 元
	ChargingCostE float32 `protobuf:"fixed32,11,opt,name=ChargingCostE" json:"ChargingCostE,omitempty"`
	// 充电起始时间 1970流失的秒数
	StartTime uint64 `protobuf:"varint,12,opt,name=StartTime" json:"StartTime,omitempty"`
	// 充电结束时间 1970流失的秒数
	EndTime uint64 `protobuf:"varint,13,opt,name=EndTime" json:"EndTime,omitempty"`
	// 充电起始电表读数 单位度
	StartMeterReading float32 `protobuf:"fixed32,14,opt,name=StartMeterReading" json:"StartMeterReading,omitempty"`
	// 充电终止电表读数 单位度
	EndMeterReading float32 `protobuf:"fixed32,15,opt,name=EndMeterReading" json:"EndMeterReading,omitempty"`
	// --------------  属性相关 ------------
	// id
	Id uint32 `protobuf:"varint,16,opt,name=id" json:"id,omitempty"`
	// 所属充电站id
	StationId uint32 `protobuf:"varint,17,opt,name=stationId" json:"stationId,omitempty"`
	// 终端类型id
	TerminalTypeId uint32 `protobuf:"varint,18,opt,name=terminalTypeId" json:"terminalTypeId,omitempty"`
	// 额定功率 单位：KW
	RatedPower float32 `protobuf:"fixed32,19,opt,name=ratedPower" json:"ratedPower,omitempty"`
	// 电流类型 0：交流，1：直流
	ElectricCurrentType uint32 `protobuf:"varint,20,opt,name=electricCurrentType" json:"electricCurrentType,omitempty"`
	// 输入电压 单位：伏特
	VoltageInput uint32 `protobuf:"varint,21,opt,name=voltageInput" json:"voltageInput,omitempty"`
	// 输出电压 单位：伏特
	VoltageOutput uint32 `protobuf:"varint,22,opt,name=voltageOutput" json:"voltageOutput,omitempty"`
	// 输出电流 单位：安培
	ElectricCurrentOutput uint32 `protobuf:"varint,23,opt,name=electricCurrentOutput" json:"electricCurrentOutput,omitempty"`
	// 枪个数
	GunNumber uint32 `protobuf:"varint,24,opt,name=gunNumber" json:"gunNumber,omitempty"`
	// 充电桩编码 车位号
	Code uint32 `protobuf:"varint,25,opt,name=code" json:"code,omitempty"`
	// 接口 0:RS232,1:RS485,2:CAN,3:USB,4:RJ45,5:RS232(DEBUG)
	InterfaceType uint32 `protobuf:"varint,26,opt,name=interfaceType" json:"interfaceType,omitempty"`
	// 波特率 0:9600,1:14400,2:19200,3:38400,4:576005,5:115200
	BaudRate uint32 `protobuf:"varint,27,opt,name=baudRate" json:"baudRate,omitempty"`
	// * 认证模式： 1 表示使用 pin 码， 0 表示不使用 pin 码；
	LockMode uint32 `protobuf:"varint,28,opt,name=lockMode" json:"lockMode,omitempty"`
	// * 0 表示正常模式 开启充电锁住枪头 APP或者pin码结束充电 才能拔出枪头(车端拔出 仍然处于充电状态)；1 表示死锁模式 枪头一直处于锁住状态 结束充电也无法拔出枪头；2 表示停止模式 开启充电锁住枪头 车端拔出 会立刻停止充电；
	AuthMode uint32 `protobuf:"varint,29,opt,name=authMode" json:"authMode,omitempty"`
}

func (m *ChargingPileStatus) Reset()                    { *m = ChargingPileStatus{} }
func (m *ChargingPileStatus) String() string            { return proto.CompactTextString(m) }
func (*ChargingPileStatus) ProtoMessage()               {}
func (*ChargingPileStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChargingPileStatus) GetDasUuid() string {
	if m != nil {
		return m.DasUuid
	}
	return ""
}

func (m *ChargingPileStatus) GetCpid() uint64 {
	if m != nil {
		return m.Cpid
	}
	return 0
}

func (m *ChargingPileStatus) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChargingPileStatus) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ChargingPileStatus) GetRealTimeCurrent() float32 {
	if m != nil {
		return m.RealTimeCurrent
	}
	return 0
}

func (m *ChargingPileStatus) GetRealTimeVoltage() float32 {
	if m != nil {
		return m.RealTimeVoltage
	}
	return 0
}

func (m *ChargingPileStatus) GetCurrentOrderNumber() string {
	if m != nil {
		return m.CurrentOrderNumber
	}
	return ""
}

func (m *ChargingPileStatus) GetChargingDuration() uint32 {
	if m != nil {
		return m.ChargingDuration
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingCapacity() float32 {
	if m != nil {
		return m.ChargingCapacity
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingCost() float32 {
	if m != nil {
		return m.ChargingCost
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingCostE() float32 {
	if m != nil {
		return m.ChargingCostE
	}
	return 0
}

func (m *ChargingPileStatus) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ChargingPileStatus) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ChargingPileStatus) GetStartMeterReading() float32 {
	if m != nil {
		return m.StartMeterReading
	}
	return 0
}

func (m *ChargingPileStatus) GetEndMeterReading() float32 {
	if m != nil {
		return m.EndMeterReading
	}
	return 0
}

func (m *ChargingPileStatus) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChargingPileStatus) GetStationId() uint32 {
	if m != nil {
		return m.StationId
	}
	return 0
}

func (m *ChargingPileStatus) GetTerminalTypeId() uint32 {
	if m != nil {
		return m.TerminalTypeId
	}
	return 0
}

func (m *ChargingPileStatus) GetRatedPower() float32 {
	if m != nil {
		return m.RatedPower
	}
	return 0
}

func (m *ChargingPileStatus) GetElectricCurrentType() uint32 {
	if m != nil {
		return m.ElectricCurrentType
	}
	return 0
}

func (m *ChargingPileStatus) GetVoltageInput() uint32 {
	if m != nil {
		return m.VoltageInput
	}
	return 0
}

func (m *ChargingPileStatus) GetVoltageOutput() uint32 {
	if m != nil {
		return m.VoltageOutput
	}
	return 0
}

func (m *ChargingPileStatus) GetElectricCurrentOutput() uint32 {
	if m != nil {
		return m.ElectricCurrentOutput
	}
	return 0
}

func (m *ChargingPileStatus) GetGunNumber() uint32 {
	if m != nil {
		return m.GunNumber
	}
	return 0
}

func (m *ChargingPileStatus) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChargingPileStatus) GetInterfaceType() uint32 {
	if m != nil {
		return m.InterfaceType
	}
	return 0
}

func (m *ChargingPileStatus) GetBaudRate() uint32 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *ChargingPileStatus) GetLockMode() uint32 {
	if m != nil {
		return m.LockMode
	}
	return 0
}

func (m *ChargingPileStatus) GetAuthMode() uint32 {
	if m != nil {
		return m.AuthMode
	}
	return 0
}

func init() {
	proto.RegisterType((*ChargingPileStatus)(nil), "Report.ChargingPileStatus")
}

func init() { proto.RegisterFile("charge_pile_status.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x6f, 0xda, 0x40,
	0x10, 0xc5, 0x65, 0x4a, 0x08, 0x9e, 0xf2, 0xcf, 0x0e, 0x24, 0x93, 0xa4, 0x91, 0x50, 0x4f, 0x9c,
	0x7a, 0xe9, 0x47, 0xa0, 0x1c, 0x38, 0xa4, 0x89, 0x48, 0xd4, 0x2b, 0x5a, 0xbc, 0x53, 0x67, 0x55,
	0xb3, 0x6b, 0xad, 0x67, 0x5b, 0x71, 0xeb, 0x47, 0xaf, 0x76, 0xc0, 0x15, 0xed, 0xf5, 0xf7, 0xde,
	0xcc, 0xbc, 0x7d, 0x36, 0x60, 0xf1, 0xa6, 0x7c, 0x49, 0xdb, 0xda, 0x54, 0xb4, 0x6d, 0x58, 0x71,
	0x68, 0x3e, 0xd5, 0xde, 0xb1, 0xcb, 0x7b, 0x1b, 0xaa, 0x9d, 0xe7, 0x8f, 0xbf, 0x2f, 0x20, 0x5f,
	0x46, 0x93, 0xb1, 0xe5, 0xb3, 0xa9, 0xe8, 0x45, 0x4c, 0xf9, 0x04, 0xfa, 0x5a, 0x35, 0xdb, 0x10,
	0x8c, 0xc6, 0x64, 0x9e, 0x2c, 0xd2, 0x7c, 0x00, 0xdd, 0xa2, 0x36, 0x1a, 0x3b, 0xf3, 0x64, 0xd1,
	0xcd, 0x33, 0x48, 0x5f, 0xcd, 0x9e, 0x1a, 0x56, 0xfb, 0x1a, 0xdf, 0x09, 0x1a, 0x41, 0xef, 0x78,
	0x01, 0xbb, 0xf3, 0x64, 0x31, 0xcc, 0x6f, 0x60, 0xbc, 0x21, 0x55, 0x45, 0xdb, 0x32, 0x78, 0x4f,
	0x96, 0xf1, 0x62, 0x9e, 0x2c, 0x3a, 0xe7, 0xc2, 0x37, 0x57, 0xb1, 0x2a, 0x09, 0x7b, 0x22, 0xdc,
	0x41, 0x5e, 0x1c, 0x9d, 0x4f, 0x5e, 0x93, 0xff, 0x1a, 0xf6, 0x3b, 0xf2, 0x78, 0x29, 0xe7, 0x11,
	0x26, 0x6d, 0xcc, 0x2f, 0xc1, 0x2b, 0x36, 0xce, 0x62, 0x5f, 0xee, 0x9c, 0x29, 0x4b, 0x55, 0xab,
	0xc2, 0xf0, 0x01, 0x53, 0xd9, 0x37, 0x85, 0xc1, 0x5f, 0xc5, 0x35, 0x8c, 0x20, 0x74, 0x06, 0xc3,
	0x73, 0xba, 0xc2, 0xf7, 0x82, 0x33, 0x48, 0x5f, 0x58, 0x79, 0x8e, 0xb1, 0x70, 0x20, 0x2f, 0x1a,
	0xc3, 0xe5, 0xca, 0x6a, 0x01, 0x43, 0x01, 0xb7, 0x90, 0x89, 0xe7, 0x91, 0x98, 0xfc, 0x86, 0x94,
	0x36, 0xb6, 0xc4, 0x51, 0xfb, 0xa8, 0x95, 0xd5, 0xff, 0x08, 0x63, 0x11, 0x00, 0x3a, 0x46, 0xe3,
	0x44, 0xa2, 0x66, 0x90, 0xc6, 0x8a, 0x8c, 0xb3, 0x6b, 0x8d, 0x99, 0xa0, 0x6b, 0x18, 0x31, 0xf9,
	0xbd, 0xb1, 0xaa, 0x7a, 0x3d, 0xd4, 0xb4, 0xd6, 0x98, 0x0b, 0xcf, 0x01, 0xbc, 0x62, 0xd2, 0xcf,
	0xee, 0x17, 0x79, 0xbc, 0x92, 0x55, 0xf7, 0x70, 0x45, 0x15, 0x15, 0xec, 0x4d, 0x71, 0x6a, 0x34,
	0x8e, 0xe0, 0x54, 0x06, 0xa6, 0x30, 0xf8, 0x79, 0x6c, 0x73, 0x6d, 0xeb, 0xc0, 0x38, 0x13, 0x3a,
	0x83, 0xe1, 0x89, 0x3e, 0x05, 0x8e, 0xf8, 0x5a, 0xf0, 0x03, 0xcc, 0xfe, 0xdb, 0x74, 0x92, 0x6f,
	0xda, 0x9c, 0x65, 0xb0, 0xa7, 0xfe, 0x51, 0x50, 0xfc, 0xfc, 0x4e, 0x13, 0xde, 0xb6, 0x6b, 0x8d,
	0x65, 0xf2, 0xdf, 0x55, 0x41, 0x92, 0xe1, 0x4e, 0xf0, 0x04, 0xfa, 0x3b, 0x15, 0xf4, 0x46, 0x31,
	0xe1, 0x7d, 0x4b, 0x2a, 0x57, 0xfc, 0x78, 0x8c, 0xa3, 0x1f, 0x5a, 0xa2, 0x02, 0xbf, 0x09, 0x79,
	0x88, 0x64, 0xd7, 0x93, 0x3f, 0xf2, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x02, 0x6e,
	0x00, 0xad, 0x02, 0x00, 0x00,
}
